services:

  zookeeper:
    container_name: kafka_zookeeper
    image: docker.io/bitnami/zookeeper:3.7
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    container_name: kafka_kafka-node-1
    image: docker.io/bitnami/kafka:3.3.2
    ports:
      - "9092:9092"
      - "9093:9093"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_INTER_BROKER_LISTENER_NAME=CLIENT
    healthcheck:
      test: ["CMD", "/opt/bitnami/kafka/bin/kafka-topics.sh", "--list", "--bootstrap-server", "kafka:9092"]
      interval: 5s
      timeout: 60s
      retries: 20
    depends_on:
      - zookeeper

  kafka-init:
    image: docker.io/bitnami/kafka:3.3.2
    command: [ "/bin/bash", "-c", "/create_topic.sh"]
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "cat ./is_finished"]
      interval: 3s
      timeout: 300s
      retries: 100
    volumes:
      - type: bind
        source: ./create_topic.sh
        target: /create_topic.sh
      - type: bind
        source: ./kafka-topic
        target: /kafka-topic
      - type: bind
        source: ./is_finished
        target: /is_finished
    init: true

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka_ui
    ports:
      - "18080:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    depends_on:
      # kafka-init:
      #   condition: service_healthy
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_started


volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
